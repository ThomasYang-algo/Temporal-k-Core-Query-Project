File Description:
 TCD.cpp: Contain source code of proposed TCD and OTCD
 i-PHC.cpp: Contain source code of iPHC-TCQ as Baseline

Running Tips:
To use the code for TCQ query, it simply requires compilation of the corresponding .cpp file. Since OTCD depends on TEL 
while iPHC-TCQ depends on PHC-Index, they are implemented in TCD.cpp and iPHC-TCQ.cpp separately. The algorithm is 
already complicated enough, that's why we implemented everything regarding a method in a single file to avoid any 
dependency issues. The experiments are conducted on Visual Studio 2019, so the same IDE is recommended. After construction, 
the obtained executable file is launched followed by two arguments:dataset file name and testcase file name. The dataset
file should only contain the edge set in form of "u v t", with space as separator. The testcase file should only contain a group
of queries line by line, in form of "ts te k", with TAB as separator. Notice that the code does not allow for parallel edges with
identical timestamps. Because such edges are redundant and do not influence the method, while might make the implementation a little
inelegant. If your dataset contain such edges, make sure they are filtered before running the code to avoid unexpected issues. After
running, the corresponding information retrieved will be outputed to console in following format:
	Graph Name:graphname //name of the graph
	Query:ts te k        //processed query
	TCD Time Clapse(nanoseconds):clapse  //Time consumed by TCD
	OTCD Time Clapse(nanoseconds):oclapse //Time consumed by OTCD
 	OTCD Accessed Cell:cell              //number of temporal k-core processed.

If you want to decide what information to gather in OTCD or even use the code in your own project, you need to use "tcd" function, "otcd" function
and all related functions. The function for information gathering is "process", you can modify it for your purpose. Actually we are working on an 
application for building a GUI of all funcionalities.
